plugins {
    id 'java'
    id 'com.github.psxpaul.execfork' version '0.1.11'
}

repositories {
    mavenCentral()
}

version = '1-SNAPSHOT'

sourceCompatibility = '1.8'

ext {
    versions = [:]
}

versions.commons_cli = '1.3.1'
versions.jetty = '8.1.22.v20160922'
versions.slf4j = '1.7.26'
versions.commons_httpclient = '3.1'
versions.httpclient4 = '4.5.9'
versions.httpasyncclient4 = '4.1.4'
versions.httpclient5 = '5.0-beta4'

dependencies {
    compile "commons-cli:commons-cli:${versions.commons_cli}"
    compile "org.eclipse.jetty:jetty-server:${versions.jetty}"
    compile "org.eclipse.jetty:jetty-client:${versions.jetty}"
    compile "org.slf4j:slf4j-api:${versions.slf4j}"
    compile "org.slf4j:slf4j-nop:${versions.slf4j}"
    compile "commons-httpclient:commons-httpclient:${versions.commons_httpclient}"
    compile "org.apache.httpcomponents:httpclient:${versions.httpclient4}"
    compile "org.apache.httpcomponents:httpasyncclient:${versions.httpasyncclient4}"
}

def targetUri = project.hasProperty('benchmark.target-uri') ? project.'benchmark.target-uri' : null
def n = project.hasProperty('benchmark.requests') ? project.'benchmark.requests' : 2000
def c = project.hasProperty('benchmark.concurrency') ? project.'benchmark.concurrency' : 2
def content = project.hasProperty('benchmark.content-file') ? project.'benchmark.content-file' : null
def contentType = project.hasProperty('benchmark.content-type') ? project.'benchmark.content-type' : 'text/plain'
def useEmbeddedServer = false
def serverPort = project.hasProperty('benchmark.server.port') ? project.'benchmark.server.port' as int : 8888
if (targetUri == null) {
    useEmbeddedServer = true

    println 'The benchmark will be using embedded HTTP server to handle requests'

    if (content) {
        targetUri = "http://localhost:${serverPort}/echo"
    } else {
        targetUri = "http://localhost:${serverPort}/rnd?c=2000"
    }

}

task embeddedServer(type: com.github.psxpaul.task.JavaExecFork, dependsOn: 'classes') {
    classpath = sourceSets.main.runtimeClasspath
    main = 'com.ok2c.http.client.benchmark.BenchmarkServer'
    args = ["${serverPort}"]
    waitForPort = serverPort
}

task benchmark(dependsOn: 'classes') {
    doLast {

        def agents = [
                'HttpJRE',
                'ApacheHttpClientV3',
                'ApacheHttpClientV4',
                'ApacheHttpAsyncClientV4',
                'JettyHttpClient'
        ]

        def params = ['-n', "${n}", '-c', "${c}", '-k']
        if (content) {
            params += ['-p', content, '-t', contentType]
        }
        params += targetUri

        agents.each { agent ->
            javaexec {
                main = "com.ok2c.http.client.benchmark.${agent}"
                classpath = sourceSets.main.runtimeClasspath
                args = params
            }
            sleep(2000)
        }
    }
}

if (useEmbeddedServer) {
    benchmark.dependsOn('embeddedServer')
}

defaultTasks 'clean', 'benchmark'
